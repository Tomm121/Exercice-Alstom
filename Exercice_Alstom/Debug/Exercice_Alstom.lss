
Exercice_Alstom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000007aa  0000083e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080013e  0080013e  0000087c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001321  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c67  00000000  00000000  00001d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa4  00000000  00000000  00002974  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00003418  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060f  00000000  00000000  000035fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000055d  00000000  00000000  00003c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004168  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	70 c2       	rjmp	.+1248   	; 0x4e6 <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	27 c2       	rjmp	.+1102   	; 0x498 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ea       	ldi	r30, 0xAA	; 170
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 33       	cpi	r26, 0x3E	; 62
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e3       	ldi	r26, 0x3E	; 62
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 35       	cpi	r26, 0x59	; 89
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	45 d1       	rcall	.+650    	; 0x34e <main>
  c4:	70 c3       	rjmp	.+1760   	; 0x7a6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <hardware_init>:
#include "avr/interrupt.h"

void hardware_init()
{
	// Configuration des pins en entrées ou en sorties (1 = sortie / 0 = entree)
	SET_BIT(DDRD,DDD7);
  c8:	8a b1       	in	r24, 0x0a	; 10
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	8a b9       	out	0x0a, r24	; 10
	CLR_BIT(DDRD,DDD2);
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	8b 7f       	andi	r24, 0xFB	; 251
  d2:	8a b9       	out	0x0a, r24	; 10
	
	
	//Pull-up sur le bouton
	SET_BIT(PORTD,PORTD2);
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	8b b9       	out	0x0b, r24	; 11
	
	
	//Configuration des interruptions
	SET_BIT(EICRA,ISC01); // flancs descendants 
  da:	e9 e6       	ldi	r30, 0x69	; 105
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	80 83       	st	Z, r24
	CLR_BIT(EICRA,ISC00); // flancs descendants 
  e4:	80 81       	ld	r24, Z
  e6:	8e 7f       	andi	r24, 0xFE	; 254
  e8:	80 83       	st	Z, r24
	SET_BIT(EIMSK,INT0); // activer INT0
  ea:	8d b3       	in	r24, 0x1d	; 29
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	8d bb       	out	0x1d, r24	; 29
	sei(); // autorise les interruptions globales
  f0:	78 94       	sei
  f2:	08 95       	ret

000000f4 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  f4:	82 b1       	in	r24, 0x02	; 2
  f6:	84 60       	ori	r24, 0x04	; 4
  f8:	82 b9       	out	0x02, r24	; 2
    lcd_e_delay();
  fa:	00 c0       	rjmp	.+0      	; 0xfc <toggle_e+0x8>
    lcd_e_low();
  fc:	82 b1       	in	r24, 0x02	; 2
  fe:	8b 7f       	andi	r24, 0xFB	; 251
 100:	82 b9       	out	0x02, r24	; 2
 102:	08 95       	ret

00000104 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 108:	66 23       	and	r22, r22
 10a:	21 f0       	breq	.+8      	; 0x114 <lcd_write+0x10>
       lcd_rs_high();
 10c:	82 b1       	in	r24, 0x02	; 2
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	82 b9       	out	0x02, r24	; 2
 112:	03 c0       	rjmp	.+6      	; 0x11a <lcd_write+0x16>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 114:	82 b1       	in	r24, 0x02	; 2
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	82 b9       	out	0x02, r24	; 2
    }
    lcd_rw_low();
 11a:	82 b1       	in	r24, 0x02	; 2
 11c:	8d 7f       	andi	r24, 0xFD	; 253
 11e:	82 b9       	out	0x02, r24	; 2
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 120:	81 b1       	in	r24, 0x01	; 1
 122:	88 60       	ori	r24, 0x08	; 8
 124:	81 b9       	out	0x01, r24	; 1
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 126:	81 b1       	in	r24, 0x01	; 1
 128:	80 61       	ori	r24, 0x10	; 16
 12a:	81 b9       	out	0x01, r24	; 1
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 12c:	81 b1       	in	r24, 0x01	; 1
 12e:	80 62       	ori	r24, 0x20	; 32
 130:	81 b9       	out	0x01, r24	; 1
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 132:	81 b1       	in	r24, 0x01	; 1
 134:	80 64       	ori	r24, 0x40	; 64
 136:	81 b9       	out	0x01, r24	; 1
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 138:	82 b1       	in	r24, 0x02	; 2
 13a:	8f 7b       	andi	r24, 0xBF	; 191
 13c:	82 b9       	out	0x02, r24	; 2
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 13e:	82 b1       	in	r24, 0x02	; 2
 140:	8f 7d       	andi	r24, 0xDF	; 223
 142:	82 b9       	out	0x02, r24	; 2
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 144:	82 b1       	in	r24, 0x02	; 2
 146:	8f 7e       	andi	r24, 0xEF	; 239
 148:	82 b9       	out	0x02, r24	; 2
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 14a:	82 b1       	in	r24, 0x02	; 2
 14c:	87 7f       	andi	r24, 0xF7	; 247
 14e:	82 b9       	out	0x02, r24	; 2
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 150:	cc 23       	and	r28, r28
 152:	1c f4       	brge	.+6      	; 0x15a <lcd_write+0x56>
 154:	82 b1       	in	r24, 0x02	; 2
 156:	80 64       	ori	r24, 0x40	; 64
 158:	82 b9       	out	0x02, r24	; 2
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 15a:	c6 ff       	sbrs	r28, 6
 15c:	03 c0       	rjmp	.+6      	; 0x164 <lcd_write+0x60>
 15e:	82 b1       	in	r24, 0x02	; 2
 160:	80 62       	ori	r24, 0x20	; 32
 162:	82 b9       	out	0x02, r24	; 2
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 164:	c5 ff       	sbrs	r28, 5
 166:	03 c0       	rjmp	.+6      	; 0x16e <lcd_write+0x6a>
 168:	82 b1       	in	r24, 0x02	; 2
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	82 b9       	out	0x02, r24	; 2
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 16e:	c4 ff       	sbrs	r28, 4
 170:	03 c0       	rjmp	.+6      	; 0x178 <lcd_write+0x74>
 172:	82 b1       	in	r24, 0x02	; 2
 174:	88 60       	ori	r24, 0x08	; 8
 176:	82 b9       	out	0x02, r24	; 2
        lcd_e_toggle();
 178:	bd df       	rcall	.-134    	; 0xf4 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 17a:	82 b1       	in	r24, 0x02	; 2
 17c:	8f 7b       	andi	r24, 0xBF	; 191
 17e:	82 b9       	out	0x02, r24	; 2
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 180:	82 b1       	in	r24, 0x02	; 2
 182:	8f 7d       	andi	r24, 0xDF	; 223
 184:	82 b9       	out	0x02, r24	; 2
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 186:	82 b1       	in	r24, 0x02	; 2
 188:	8f 7e       	andi	r24, 0xEF	; 239
 18a:	82 b9       	out	0x02, r24	; 2
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 18c:	82 b1       	in	r24, 0x02	; 2
 18e:	87 7f       	andi	r24, 0xF7	; 247
 190:	82 b9       	out	0x02, r24	; 2
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 192:	c3 ff       	sbrs	r28, 3
 194:	03 c0       	rjmp	.+6      	; 0x19c <lcd_write+0x98>
 196:	82 b1       	in	r24, 0x02	; 2
 198:	80 64       	ori	r24, 0x40	; 64
 19a:	82 b9       	out	0x02, r24	; 2
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 19c:	c2 ff       	sbrs	r28, 2
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <lcd_write+0xa2>
 1a0:	82 b1       	in	r24, 0x02	; 2
 1a2:	80 62       	ori	r24, 0x20	; 32
 1a4:	82 b9       	out	0x02, r24	; 2
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 1a6:	c1 ff       	sbrs	r28, 1
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <lcd_write+0xac>
 1aa:	82 b1       	in	r24, 0x02	; 2
 1ac:	80 61       	ori	r24, 0x10	; 16
 1ae:	82 b9       	out	0x02, r24	; 2
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 1b0:	c0 ff       	sbrs	r28, 0
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <lcd_write+0xb6>
 1b4:	82 b1       	in	r24, 0x02	; 2
 1b6:	88 60       	ori	r24, 0x08	; 8
        lcd_e_toggle();        
 1b8:	82 b9       	out	0x02, r24	; 2
 1ba:	9c df       	rcall	.-200    	; 0xf4 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 1bc:	82 b1       	in	r24, 0x02	; 2
 1be:	88 60       	ori	r24, 0x08	; 8
 1c0:	82 b9       	out	0x02, r24	; 2
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 1c2:	82 b1       	in	r24, 0x02	; 2
 1c4:	80 61       	ori	r24, 0x10	; 16
 1c6:	82 b9       	out	0x02, r24	; 2
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 1c8:	82 b1       	in	r24, 0x02	; 2
 1ca:	80 62       	ori	r24, 0x20	; 32
 1cc:	82 b9       	out	0x02, r24	; 2
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 1ce:	82 b1       	in	r24, 0x02	; 2
 1d0:	80 64       	ori	r24, 0x40	; 64
 1d2:	82 b9       	out	0x02, r24	; 2
    }
}
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 1d8:	88 23       	and	r24, r24
 1da:	21 f0       	breq	.+8      	; 0x1e4 <lcd_read+0xc>
        lcd_rs_high();                       /* RS=1: read data      */
 1dc:	82 b1       	in	r24, 0x02	; 2
 1de:	81 60       	ori	r24, 0x01	; 1
 1e0:	82 b9       	out	0x02, r24	; 2
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <lcd_read+0x12>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 1e4:	82 b1       	in	r24, 0x02	; 2
 1e6:	8e 7f       	andi	r24, 0xFE	; 254
 1e8:	82 b9       	out	0x02, r24	; 2
    lcd_rw_high();                           /* RW=1  read mode      */
 1ea:	82 b1       	in	r24, 0x02	; 2
 1ec:	82 60       	ori	r24, 0x02	; 2
 1ee:	82 b9       	out	0x02, r24	; 2
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 1f0:	81 b1       	in	r24, 0x01	; 1
 1f2:	87 7f       	andi	r24, 0xF7	; 247
 1f4:	81 b9       	out	0x01, r24	; 1
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 1f6:	81 b1       	in	r24, 0x01	; 1
 1f8:	8f 7e       	andi	r24, 0xEF	; 239
 1fa:	81 b9       	out	0x01, r24	; 1
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 1fc:	81 b1       	in	r24, 0x01	; 1
 1fe:	8f 7d       	andi	r24, 0xDF	; 223
 200:	81 b9       	out	0x01, r24	; 1
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 202:	81 b1       	in	r24, 0x01	; 1
 204:	8f 7b       	andi	r24, 0xBF	; 191
 206:	81 b9       	out	0x01, r24	; 1
                
        /* read high nibble first */
        lcd_e_high();
 208:	82 b1       	in	r24, 0x02	; 2
 20a:	84 60       	ori	r24, 0x04	; 4
 20c:	82 b9       	out	0x02, r24	; 2
        lcd_e_delay();        
 20e:	00 c0       	rjmp	.+0      	; 0x210 <lcd_read+0x38>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 210:	03 99       	sbic	0x00, 3	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <lcd_read+0x40>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	01 c0       	rjmp	.+2      	; 0x21a <lcd_read+0x42>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 218:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 21a:	04 99       	sbic	0x00, 4	; 0
 21c:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 21e:	05 99       	sbic	0x00, 5	; 0
 220:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 222:	06 99       	sbic	0x00, 6	; 0
 224:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 226:	92 b1       	in	r25, 0x02	; 2
 228:	9b 7f       	andi	r25, 0xFB	; 251
 22a:	92 b9       	out	0x02, r25	; 2

        lcd_e_delay();                       /* Enable 500ns low       */
 22c:	00 c0       	rjmp	.+0      	; 0x22e <lcd_read+0x56>
    
        /* read low nibble */    
        lcd_e_high();
 22e:	92 b1       	in	r25, 0x02	; 2
 230:	94 60       	ori	r25, 0x04	; 4
 232:	92 b9       	out	0x02, r25	; 2
        lcd_e_delay();
 234:	00 c0       	rjmp	.+0      	; 0x236 <lcd_read+0x5e>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 236:	03 99       	sbic	0x00, 3	; 0
 238:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 23a:	04 99       	sbic	0x00, 4	; 0
 23c:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 23e:	05 99       	sbic	0x00, 5	; 0
 240:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 242:	06 99       	sbic	0x00, 6	; 0
 244:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 246:	92 b1       	in	r25, 0x02	; 2
 248:	9b 7f       	andi	r25, 0xFB	; 251
 24a:	92 b9       	out	0x02, r25	; 2
    }
    return data;
}
 24c:	08 95       	ret

0000024e <lcd_waitbusy>:

{
    register uint8_t c;
    
    // wait until busy flag is cleared 
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	c3 df       	rcall	.-122    	; 0x1d8 <lcd_read>
 252:	88 23       	and	r24, r24
 254:	e4 f3       	brlt	.-8      	; 0x24e <lcd_waitbusy>
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_waitbusy+0xa>
    
    // the address counter is updated 4us after the busy flag is cleared 
    delay(2);

    // now read the address counter 
    return (lcd_read(0));  // return address counter
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	be cf       	rjmp	.-132    	; 0x1d8 <lcd_read>
    
}/* lcd_waitbusy */
 25c:	08 95       	ret

0000025e <lcd_command>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/

void lcd_command(uint8_t cmd)
{
 25e:	cf 93       	push	r28
 260:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 262:	f5 df       	rcall	.-22     	; 0x24e <lcd_waitbusy>
    lcd_write(cmd,0);
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	8c 2f       	mov	r24, r28
 268:	4d df       	rcall	.-358    	; 0x104 <lcd_write>
}
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 26e:	61 11       	cpse	r22, r1
 270:	03 c0       	rjmp	.+6      	; 0x278 <lcd_gotoxy+0xa>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 272:	80 58       	subi	r24, 0x80	; 128
 274:	f4 cf       	rjmp	.-24     	; 0x25e <lcd_command>
 276:	08 95       	ret
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 278:	80 54       	subi	r24, 0x40	; 64
 27a:	f1 cf       	rjmp	.-30     	; 0x25e <lcd_command>
 27c:	08 95       	ret

0000027e <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	ee cf       	rjmp	.-36     	; 0x25e <lcd_command>
 282:	08 95       	ret

00000284 <lcd_putc>:
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/

void lcd_putc(char c)
{
 284:	cf 93       	push	r28
 286:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 288:	e2 df       	rcall	.-60     	; 0x24e <lcd_waitbusy>
    if (c=='\n')
 28a:	ca 30       	cpi	r28, 0x0A	; 10
 28c:	41 f4       	brne	.+16     	; 0x29e <lcd_putc+0x1a>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 28e:	80 34       	cpi	r24, 0x40	; 64
 290:	10 f4       	brcc	.+4      	; 0x296 <lcd_putc+0x12>
        addressCounter = LCD_START_LINE2;
 292:	80 e4       	ldi	r24, 0x40	; 64
 294:	01 c0       	rjmp	.+2      	; 0x298 <lcd_putc+0x14>
    else
        addressCounter = LCD_START_LINE1;
 296:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 298:	80 58       	subi	r24, 0x80	; 128
 29a:	e1 df       	rcall	.-62     	; 0x25e <lcd_command>
 29c:	03 c0       	rjmp	.+6      	; 0x2a4 <lcd_putc+0x20>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	8c 2f       	mov	r24, r28
 2a2:	30 df       	rcall	.-416    	; 0x104 <lcd_write>
    }

}/* lcd_putc */
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = *s++) ) {
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <lcd_puts+0xc>
        lcd_putc(c);
 2b0:	e9 df       	rcall	.-46     	; 0x284 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 2b2:	fe 01       	movw	r30, r28
 2b4:	ef 01       	movw	r28, r30
 2b6:	21 96       	adiw	r28, 0x01	; 1
 2b8:	80 81       	ld	r24, Z
 2ba:	81 11       	cpse	r24, r1
 2bc:	f9 cf       	rjmp	.-14     	; 0x2b0 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 2cc:	81 b1       	in	r24, 0x01	; 1
 2ce:	81 60       	ori	r24, 0x01	; 1
 2d0:	81 b9       	out	0x01, r24	; 1
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 2d2:	81 b1       	in	r24, 0x01	; 1
 2d4:	82 60       	ori	r24, 0x02	; 2
 2d6:	81 b9       	out	0x01, r24	; 1
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 2d8:	81 b1       	in	r24, 0x01	; 1
 2da:	84 60       	ori	r24, 0x04	; 4
 2dc:	81 b9       	out	0x01, r24	; 1
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 2de:	81 b1       	in	r24, 0x01	; 1
 2e0:	88 60       	ori	r24, 0x08	; 8
 2e2:	81 b9       	out	0x01, r24	; 1
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 2e4:	81 b1       	in	r24, 0x01	; 1
 2e6:	80 61       	ori	r24, 0x10	; 16
 2e8:	81 b9       	out	0x01, r24	; 1
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 2ea:	81 b1       	in	r24, 0x01	; 1
 2ec:	80 62       	ori	r24, 0x20	; 32
 2ee:	81 b9       	out	0x01, r24	; 1
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 2f0:	81 b1       	in	r24, 0x01	; 1
 2f2:	80 64       	ori	r24, 0x40	; 64
 2f4:	81 b9       	out	0x01, r24	; 1
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2f6:	80 ea       	ldi	r24, 0xA0	; 160
 2f8:	9f e0       	ldi	r25, 0x0F	; 15
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_init+0x36>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 2fe:	82 b1       	in	r24, 0x02	; 2
 300:	80 61       	ori	r24, 0x10	; 16
 302:	82 b9       	out	0x02, r24	; 2
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 304:	82 b1       	in	r24, 0x02	; 2
 306:	88 60       	ori	r24, 0x08	; 8
 308:	82 b9       	out	0x02, r24	; 2
    lcd_e_toggle();
 30a:	f4 de       	rcall	.-536    	; 0xf4 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 30c:	80 ee       	ldi	r24, 0xE0	; 224
 30e:	94 e0       	ldi	r25, 0x04	; 4
 310:	01 97       	sbiw	r24, 0x01	; 1
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 312:	f1 f7       	brne	.-4      	; 0x310 <lcd_init+0x4c>
 314:	ef de       	rcall	.-546    	; 0xf4 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 316:	c0 e1       	ldi	r28, 0x10	; 16
 318:	d0 e0       	ldi	r29, 0x00	; 0
 31a:	ce 01       	movw	r24, r28
 31c:	01 97       	sbiw	r24, 0x01	; 1
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 31e:	f1 f7       	brne	.-4      	; 0x31c <lcd_init+0x58>
 320:	e9 de       	rcall	.-558    	; 0xf4 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 322:	ce 01       	movw	r24, r28
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <lcd_init+0x60>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 328:	82 b1       	in	r24, 0x02	; 2
 32a:	87 7f       	andi	r24, 0xF7	; 247
    lcd_e_toggle();
 32c:	82 b9       	out	0x02, r24	; 2
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 32e:	e2 de       	rcall	.-572    	; 0xf4 <toggle_e>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 330:	21 97       	sbiw	r28, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <lcd_init+0x6c>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 334:	88 e2       	ldi	r24, 0x28	; 40
 336:	93 df       	rcall	.-218    	; 0x25e <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 338:	88 e0       	ldi	r24, 0x08	; 8
 33a:	91 df       	rcall	.-222    	; 0x25e <lcd_command>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 33c:	a0 df       	rcall	.-192    	; 0x27e <lcd_clrscr>
 33e:	86 e0       	ldi	r24, 0x06	; 6
 340:	8e df       	rcall	.-228    	; 0x25e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 342:	81 2f       	mov	r24, r17
 344:	8c df       	rcall	.-232    	; 0x25e <lcd_command>
 346:	df 91       	pop	r29

}/* lcd_init */
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	08 95       	ret

0000034e <main>:
#include "timers.h"
#include "OS.h"

int main(void)
{
	TIMER0_Init_1ms(); //initiation du timer compteur
 34e:	13 d1       	rcall	.+550    	; 0x576 <TIMER0_Init_1ms>
	hardware_init(); // initiation de l'hardware
 350:	bb de       	rcall	.-650    	; 0xc8 <hardware_init>
	lcd_init(LCD_DISP_ON); // initiation du LCD
 352:	8c e0       	ldi	r24, 0x0C	; 12
 354:	b7 df       	rcall	.-146    	; 0x2c4 <lcd_init>
	loop_OS(); // Entree dans la boucle infinie
 356:	0e d0       	rcall	.+28     	; 0x374 <loop_OS>
 358:	80 e0       	ldi	r24, 0x00	; 0
}
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	08 95       	ret

0000035e <my_delay_ms>:
 35e:	07 c0       	rjmp	.+14     	; 0x36e <my_delay_ms+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 360:	e9 ef       	ldi	r30, 0xF9	; 249
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	31 97       	sbiw	r30, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <my_delay_ms+0x6>
 368:	00 c0       	rjmp	.+0      	; 0x36a <my_delay_ms+0xc>
 36a:	00 00       	nop
void my_delay_ms(uint16_t ms)
{
	while (0 < ms)
	{
		_delay_ms(1);
		--ms;
 36c:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void my_delay_ms(uint16_t ms)
{
	while (0 < ms)
 36e:	00 97       	sbiw	r24, 0x00	; 0
 370:	b9 f7       	brne	.-18     	; 0x360 <my_delay_ms+0x2>
	{
		_delay_ms(1);
		--ms;
	}
}
 372:	08 95       	ret

00000374 <loop_OS>:

void loop_OS()
{
	while (1)
	{	
		SET_BIT(TIMSK0,TOIE0); //activation du timer pour pouvoir generer un nombre a chaque fois different a la focntion srand()
 374:	ee e6       	ldi	r30, 0x6E	; 110
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	81 60       	ori	r24, 0x01	; 1
 37c:	80 83       	st	Z, r24
		lcd_clrscr(); // effacement de ce qui est affiche sur le LCD
 37e:	7f df       	rcall	.-258    	; 0x27e <lcd_clrscr>
		lcd_puts("Appuyez pour"); // affichage du texte sur le LCD
 380:	84 e0       	ldi	r24, 0x04	; 4
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	91 df       	rcall	.-222    	; 0x2a8 <lcd_puts>
		lcd_gotoxy(0,1); // commencer a la position (x,y) sur le LCD
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	71 df       	rcall	.-286    	; 0x26e <lcd_gotoxy>
		lcd_puts("commencer"); // affichage du texte sur le LCD
 38c:	81 e1       	ldi	r24, 0x11	; 17
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	8b df       	rcall	.-234    	; 0x2a8 <lcd_puts>
 392:	81 e0       	ldi	r24, 0x01	; 1
		etape1 = TRUE; // activation de l'etape 1, pour uniquement rentrer dans la condition 1 dans l'ISR lors de l'interrutpion du bouton
 394:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <etape1>
 398:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <etape1>
		while (etape1 == TRUE); // Periode d'attente du premier appuis du bouton
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	e1 f3       	breq	.-8      	; 0x398 <loop_OS+0x24>
		lcd_clrscr();
 3a0:	6e df       	rcall	.-292    	; 0x27e <lcd_clrscr>
 3a2:	8b e1       	ldi	r24, 0x1B	; 27
		lcd_puts("...");	
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	80 df       	rcall	.-256    	; 0x2a8 <lcd_puts>
 3a8:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <timing>
		srand(timing); // definition d'un "seed" pour ne pas generer a chaque fois les mÃªmes nombre par la fonction rand()
 3ac:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <timing+0x1>
 3b0:	5f d1       	rcall	.+702    	; 0x670 <srand>
 3b2:	ee e6       	ldi	r30, 0x6E	; 110
		CLR_BIT(TIMSK0,TOIE0); // desactivation du timer
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	8e 7f       	andi	r24, 0xFE	; 254
 3ba:	80 83       	st	Z, r24
		nombre = rand() % (MAX1 + 1); // generation d'un nombre aleatoire, en lui imposant un nombre maximal defini grace a une loi mathematique du modulo
 3bc:	56 d1       	rcall	.+684    	; 0x66a <rand>
 3be:	69 eb       	ldi	r22, 0xB9	; 185
 3c0:	7b e0       	ldi	r23, 0x0B	; 11
 3c2:	e5 d0       	rcall	.+458    	; 0x58e <__divmodhi4>
 3c4:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <nombre+0x1>
 3c8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <nombre>
		nombre_random1 = MIN1 + nombre; // ajout d'une valeur minimum de temps a cette valeur 
 3cc:	88 54       	subi	r24, 0x48	; 72
 3ce:	94 4f       	sbci	r25, 0xF4	; 244
 3d0:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <nombre_random1+0x1>
 3d4:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <nombre_random1>
		my_delay_ms(nombre_random1); // delay en ms
 3d8:	c2 df       	rcall	.-124    	; 0x35e <my_delay_ms>
		nombre = rand() % (MAX2 + 1);
 3da:	47 d1       	rcall	.+654    	; 0x66a <rand>
 3dc:	61 ea       	ldi	r22, 0xA1	; 161
 3de:	7f e0       	ldi	r23, 0x0F	; 15
 3e0:	d6 d0       	rcall	.+428    	; 0x58e <__divmodhi4>
 3e2:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <nombre+0x1>
 3e6:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <nombre>
 3ea:	88 51       	subi	r24, 0x18	; 24
 3ec:	9c 4f       	sbci	r25, 0xFC	; 252
		nombre_random2 = MIN2 + nombre;
 3ee:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <nombre_random2+0x1>
 3f2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <nombre_random2>
 3f6:	8b b1       	in	r24, 0x0b	; 11
		SET_BIT(PORTD,PD7); // activation de la LED
 3f8:	80 68       	ori	r24, 0x80	; 128
 3fa:	8b b9       	out	0x0b, r24	; 11
		my_delay_ms(nombre_random2);
 3fc:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <nombre_random2>
 400:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <nombre_random2+0x1>
 404:	ac df       	rcall	.-168    	; 0x35e <my_delay_ms>
 406:	8b b1       	in	r24, 0x0b	; 11
		CLR_BIT(PORTD,PD7); //desactivation de la LED
 408:	8f 77       	andi	r24, 0x7F	; 127
 40a:	8b b9       	out	0x0b, r24	; 11
 40c:	38 df       	rcall	.-400    	; 0x27e <lcd_clrscr>
		lcd_clrscr();
 40e:	8f e1       	ldi	r24, 0x1F	; 31
 410:	91 e0       	ldi	r25, 0x01	; 1
		lcd_puts("A toi de jouer !");
 412:	4a df       	rcall	.-364    	; 0x2a8 <lcd_puts>
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <etape2>
		etape2 = TRUE; // activation de l'etape 2, pour uniquement rentrer dans la condition 2 dans l'ISR lors de l'interrutpion du bouton
 41a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <etape2>
 41e:	81 30       	cpi	r24, 0x01	; 1
		while(etape2 == TRUE); // Periode d'attente du deuxieme appuis du bouton
 420:	e1 f3       	breq	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <etape3>
		etape3 = TRUE; // activation de l'etape 3, pour uniquement rentrer dans la condition 3 dans l'ISR lors de l'interrutpion du bouton
 428:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <etape3>
 42c:	81 30       	cpi	r24, 0x01	; 1
		while(etape3 == TRUE); //Periode d'attendre de l'enlevement du doigt du bouton
 42e:	e1 f3       	breq	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 430:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <timing>
 434:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <timing+0x1>
		resultat_joueur = timing; // Definition du resultat grÃ¢ce au timing encode
 438:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <__data_end+0x1>
 43c:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <__data_end>
 440:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <nombre_random2>
		delta = nombre_random2 - resultat_joueur; // Delta entre le temps rÃ©el et celui appuye par le joueur
 444:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <nombre_random2+0x1>
 448:	82 1b       	sub	r24, r18
 44a:	93 0b       	sbc	r25, r19
 44c:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <delta+0x1>
 450:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <delta>
		lcd_clrscr();
 454:	14 df       	rcall	.-472    	; 0x27e <lcd_clrscr>
 456:	80 e3       	ldi	r24, 0x30	; 48
		lcd_puts("Resultat :");
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	26 df       	rcall	.-436    	; 0x2a8 <lcd_puts>
 45c:	61 e0       	ldi	r22, 0x01	; 1
		lcd_gotoxy(0,1);
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	06 df       	rcall	.-500    	; 0x26e <lcd_gotoxy>
 462:	4a e0       	ldi	r20, 0x0A	; 10
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 464:	65 e4       	ldi	r22, 0x45	; 69
 466:	71 e0       	ldi	r23, 0x01	; 1
 468:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <delta>
 46c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <delta+0x1>
 470:	0a d1       	rcall	.+532    	; 0x686 <__itoa_ncheck>
 472:	85 e4       	ldi	r24, 0x45	; 69
 474:	91 e0       	ldi	r25, 0x01	; 1
		itoa(delta,buffer,10);
		lcd_puts(buffer);
 476:	18 df       	rcall	.-464    	; 0x2a8 <lcd_puts>
 478:	61 e0       	ldi	r22, 0x01	; 1
 47a:	85 e0       	ldi	r24, 0x05	; 5
 47c:	f8 de       	rcall	.-528    	; 0x26e <lcd_gotoxy>
 		lcd_gotoxy(5,1);
 47e:	8b e3       	ldi	r24, 0x3B	; 59
 480:	91 e0       	ldi	r25, 0x01	; 1
 482:	12 df       	rcall	.-476    	; 0x2a8 <lcd_puts>
 484:	2f e1       	ldi	r18, 0x1F	; 31
 		lcd_puts("ms");
 486:	81 ea       	ldi	r24, 0xA1	; 161
 488:	97 e0       	ldi	r25, 0x07	; 7
 48a:	21 50       	subi	r18, 0x01	; 1
 48c:	80 40       	sbci	r24, 0x00	; 0
 48e:	90 40       	sbci	r25, 0x00	; 0
 490:	e1 f7       	brne	.-8      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 492:	00 c0       	rjmp	.+0      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 494:	00 00       	nop
 496:	6e cf       	rjmp	.-292    	; 0x374 <loop_OS>

00000498 <__vector_18>:
 498:	1f 92       	push	r1
 49a:	0f 92       	push	r0
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	0f 92       	push	r0
 4a0:	11 24       	eor	r1, r1
		--ms;
	}
}

ISR(TIMER0_OVF_vect)
{
 4a2:	8f 93       	push	r24
 4a4:	9f 93       	push	r25
 4a6:	af 93       	push	r26
 4a8:	bf 93       	push	r27
	timing++;
 4aa:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <timing>
 4ae:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <timing+0x1>
 4b2:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <timing+0x2>
 4b6:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <timing+0x3>
 4ba:	01 96       	adiw	r24, 0x01	; 1
 4bc:	a1 1d       	adc	r26, r1
 4be:	b1 1d       	adc	r27, r1
 4c0:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <timing>
 4c4:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <timing+0x1>
 4c8:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <timing+0x2>
 4cc:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <timing+0x3>
	TCNT0 = 131;
 4d0:	83 e8       	ldi	r24, 0x83	; 131
 4d2:	86 bd       	out	0x26, r24	; 38
}
 4d4:	bf 91       	pop	r27
 4d6:	af 91       	pop	r26
 4d8:	9f 91       	pop	r25
 4da:	8f 91       	pop	r24
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <__vector_1>:

ISR(INT0_vect)
{
 4e6:	1f 92       	push	r1
 4e8:	0f 92       	push	r0
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	0f 92       	push	r0
 4ee:	11 24       	eor	r1, r1
 4f0:	0b b6       	in	r0, 0x3b	; 59
 4f2:	0f 92       	push	r0
 4f4:	8f 93       	push	r24
 4f6:	ef 93       	push	r30
 4f8:	ff 93       	push	r31
	if (etape1 == TRUE)
 4fa:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <etape1>
 4fe:	81 30       	cpi	r24, 0x01	; 1
 500:	11 f4       	brne	.+4      	; 0x506 <__vector_1+0x20>
	{
		etape1 = 0; // desactivation de l'etape 1, pour que la condition de la boucle while ne soit plus verifiee
 502:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <etape1>

	}
	if (etape2 == TRUE)
 506:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <etape2>
 50a:	81 30       	cpi	r24, 0x01	; 1
 50c:	b9 f4       	brne	.+46     	; 0x53c <__vector_1+0x56>
	{
		SET_BIT(EICRA,ISC00); // re-definition du parametre de l'interruption, pour le faire reagir lors dans flancs montants et non plus sur les descendnants, pour le relachement du bouton
 50e:	e9 e6       	ldi	r30, 0x69	; 105
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	81 60       	ori	r24, 0x01	; 1
 516:	80 83       	st	Z, r24
		timing = 0; // Reinitiation du timing
 518:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <timing>
 51c:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <timing+0x1>
 520:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <timing+0x2>
 524:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <timing+0x3>
		SET_BIT(TIMSK0,TOIE0); // activation du timer 
 528:	ee e6       	ldi	r30, 0x6E	; 110
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	81 60       	ori	r24, 0x01	; 1
 530:	80 83       	st	Z, r24
		SET_BIT(PORTD,PD7); // activation de la LED
 532:	8b b1       	in	r24, 0x0b	; 11
 534:	80 68       	ori	r24, 0x80	; 128
 536:	8b b9       	out	0x0b, r24	; 11
		etape2 = FALSE; // desactivation de l'etape 2, pour que la condition de la boucle while ne soit plus verifiee
 538:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <etape2>
	}
	if (etape3 == TRUE)
 53c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <etape3>
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	79 f4       	brne	.+30     	; 0x562 <__vector_1+0x7c>
	{
		CLR_BIT(EICRA,ISC00); // re-definition du parametre de l'interruption, pour le faire reagir lors dans flancs descendants
 544:	e9 e6       	ldi	r30, 0x69	; 105
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	8e 7f       	andi	r24, 0xFE	; 254
 54c:	80 83       	st	Z, r24
		CLR_BIT(TIMSK0,TOIE0); //desactivation du timer
 54e:	ee e6       	ldi	r30, 0x6E	; 110
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	8e 7f       	andi	r24, 0xFE	; 254
 556:	80 83       	st	Z, r24
		CLR_BIT(PORTD,PORTD7); // desactivation de la LED
 558:	8b b1       	in	r24, 0x0b	; 11
 55a:	8f 77       	andi	r24, 0x7F	; 127
 55c:	8b b9       	out	0x0b, r24	; 11
		etape3 = FALSE; // desactivation de l'etape 3, pour que la condition de la boucle while ne soit plus verifiee
 55e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <etape3>
	}
 562:	ff 91       	pop	r31
 564:	ef 91       	pop	r30
 566:	8f 91       	pop	r24
 568:	0f 90       	pop	r0
 56a:	0b be       	out	0x3b, r0	; 59
 56c:	0f 90       	pop	r0
 56e:	0f be       	out	0x3f, r0	; 63
 570:	0f 90       	pop	r0
 572:	1f 90       	pop	r1
 574:	18 95       	reti

00000576 <TIMER0_Init_1ms>:
	// Si diviseur par 8 --> 1000000/8 = 125 Khz
	// Une periode = un coup de clock tous les 8us
	// 1 ms / 8us = 125 ==> On doit faire 125 coups de clock pour avoir 1ms
	
	//Prescaler de division par 8
	CLR_BIT(TCCR0B,CS02);
 576:	85 b5       	in	r24, 0x25	; 37
 578:	8b 7f       	andi	r24, 0xFB	; 251
 57a:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR0B,CS01); 
 57c:	85 b5       	in	r24, 0x25	; 37
 57e:	82 60       	ori	r24, 0x02	; 2
 580:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR0B,CS00);
 582:	85 b5       	in	r24, 0x25	; 37
 584:	8e 7f       	andi	r24, 0xFE	; 254
 586:	85 bd       	out	0x25, r24	; 37
	
	// On va pré-remplir le compteur pour qu'il ne doive faire que 125 coup de clock --> 256 - 125 = 131
	TCNT0 = 131;
 588:	83 e8       	ldi	r24, 0x83	; 131
 58a:	86 bd       	out	0x26, r24	; 38
 58c:	08 95       	ret

0000058e <__divmodhi4>:
 58e:	97 fb       	bst	r25, 7
 590:	07 2e       	mov	r0, r23
 592:	16 f4       	brtc	.+4      	; 0x598 <__divmodhi4+0xa>
 594:	00 94       	com	r0
 596:	06 d0       	rcall	.+12     	; 0x5a4 <__divmodhi4_neg1>
 598:	77 fd       	sbrc	r23, 7
 59a:	08 d0       	rcall	.+16     	; 0x5ac <__divmodhi4_neg2>
 59c:	0b d0       	rcall	.+22     	; 0x5b4 <__udivmodhi4>
 59e:	07 fc       	sbrc	r0, 7
 5a0:	05 d0       	rcall	.+10     	; 0x5ac <__divmodhi4_neg2>
 5a2:	3e f4       	brtc	.+14     	; 0x5b2 <__divmodhi4_exit>

000005a4 <__divmodhi4_neg1>:
 5a4:	90 95       	com	r25
 5a6:	81 95       	neg	r24
 5a8:	9f 4f       	sbci	r25, 0xFF	; 255
 5aa:	08 95       	ret

000005ac <__divmodhi4_neg2>:
 5ac:	70 95       	com	r23
 5ae:	61 95       	neg	r22
 5b0:	7f 4f       	sbci	r23, 0xFF	; 255

000005b2 <__divmodhi4_exit>:
 5b2:	08 95       	ret

000005b4 <__udivmodhi4>:
 5b4:	aa 1b       	sub	r26, r26
 5b6:	bb 1b       	sub	r27, r27
 5b8:	51 e1       	ldi	r21, 0x11	; 17
 5ba:	07 c0       	rjmp	.+14     	; 0x5ca <__udivmodhi4_ep>

000005bc <__udivmodhi4_loop>:
 5bc:	aa 1f       	adc	r26, r26
 5be:	bb 1f       	adc	r27, r27
 5c0:	a6 17       	cp	r26, r22
 5c2:	b7 07       	cpc	r27, r23
 5c4:	10 f0       	brcs	.+4      	; 0x5ca <__udivmodhi4_ep>
 5c6:	a6 1b       	sub	r26, r22
 5c8:	b7 0b       	sbc	r27, r23

000005ca <__udivmodhi4_ep>:
 5ca:	88 1f       	adc	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	5a 95       	dec	r21
 5d0:	a9 f7       	brne	.-22     	; 0x5bc <__udivmodhi4_loop>
 5d2:	80 95       	com	r24
 5d4:	90 95       	com	r25
 5d6:	bc 01       	movw	r22, r24
 5d8:	cd 01       	movw	r24, r26
 5da:	08 95       	ret

000005dc <do_rand>:
 5dc:	8f 92       	push	r8
 5de:	9f 92       	push	r9
 5e0:	af 92       	push	r10
 5e2:	bf 92       	push	r11
 5e4:	cf 92       	push	r12
 5e6:	df 92       	push	r13
 5e8:	ef 92       	push	r14
 5ea:	ff 92       	push	r15
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	ec 01       	movw	r28, r24
 5f2:	68 81       	ld	r22, Y
 5f4:	79 81       	ldd	r23, Y+1	; 0x01
 5f6:	8a 81       	ldd	r24, Y+2	; 0x02
 5f8:	9b 81       	ldd	r25, Y+3	; 0x03
 5fa:	61 15       	cp	r22, r1
 5fc:	71 05       	cpc	r23, r1
 5fe:	81 05       	cpc	r24, r1
 600:	91 05       	cpc	r25, r1
 602:	21 f4       	brne	.+8      	; 0x60c <do_rand+0x30>
 604:	64 e2       	ldi	r22, 0x24	; 36
 606:	79 ed       	ldi	r23, 0xD9	; 217
 608:	8b e5       	ldi	r24, 0x5B	; 91
 60a:	97 e0       	ldi	r25, 0x07	; 7
 60c:	2d e1       	ldi	r18, 0x1D	; 29
 60e:	33 ef       	ldi	r19, 0xF3	; 243
 610:	41 e0       	ldi	r20, 0x01	; 1
 612:	50 e0       	ldi	r21, 0x00	; 0
 614:	6b d0       	rcall	.+214    	; 0x6ec <__divmodsi4>
 616:	49 01       	movw	r8, r18
 618:	5a 01       	movw	r10, r20
 61a:	9b 01       	movw	r18, r22
 61c:	ac 01       	movw	r20, r24
 61e:	a7 ea       	ldi	r26, 0xA7	; 167
 620:	b1 e4       	ldi	r27, 0x41	; 65
 622:	80 d0       	rcall	.+256    	; 0x724 <__muluhisi3>
 624:	6b 01       	movw	r12, r22
 626:	7c 01       	movw	r14, r24
 628:	ac ee       	ldi	r26, 0xEC	; 236
 62a:	b4 ef       	ldi	r27, 0xF4	; 244
 62c:	a5 01       	movw	r20, r10
 62e:	94 01       	movw	r18, r8
 630:	85 d0       	rcall	.+266    	; 0x73c <__mulohisi3>
 632:	dc 01       	movw	r26, r24
 634:	cb 01       	movw	r24, r22
 636:	8c 0d       	add	r24, r12
 638:	9d 1d       	adc	r25, r13
 63a:	ae 1d       	adc	r26, r14
 63c:	bf 1d       	adc	r27, r15
 63e:	b7 ff       	sbrs	r27, 7
 640:	03 c0       	rjmp	.+6      	; 0x648 <do_rand+0x6c>
 642:	01 97       	sbiw	r24, 0x01	; 1
 644:	a1 09       	sbc	r26, r1
 646:	b0 48       	sbci	r27, 0x80	; 128
 648:	88 83       	st	Y, r24
 64a:	99 83       	std	Y+1, r25	; 0x01
 64c:	aa 83       	std	Y+2, r26	; 0x02
 64e:	bb 83       	std	Y+3, r27	; 0x03
 650:	9f 77       	andi	r25, 0x7F	; 127
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	ff 90       	pop	r15
 658:	ef 90       	pop	r14
 65a:	df 90       	pop	r13
 65c:	cf 90       	pop	r12
 65e:	bf 90       	pop	r11
 660:	af 90       	pop	r10
 662:	9f 90       	pop	r9
 664:	8f 90       	pop	r8
 666:	08 95       	ret

00000668 <rand_r>:
 668:	b9 cf       	rjmp	.-142    	; 0x5dc <do_rand>

0000066a <rand>:
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	91 e0       	ldi	r25, 0x01	; 1
 66e:	b6 cf       	rjmp	.-148    	; 0x5dc <do_rand>

00000670 <srand>:
 670:	a0 e0       	ldi	r26, 0x00	; 0
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 678:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 67c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 680:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 684:	08 95       	ret

00000686 <__itoa_ncheck>:
 686:	bb 27       	eor	r27, r27
 688:	4a 30       	cpi	r20, 0x0A	; 10
 68a:	31 f4       	brne	.+12     	; 0x698 <__itoa_ncheck+0x12>
 68c:	99 23       	and	r25, r25
 68e:	22 f4       	brpl	.+8      	; 0x698 <__itoa_ncheck+0x12>
 690:	bd e2       	ldi	r27, 0x2D	; 45
 692:	90 95       	com	r25
 694:	81 95       	neg	r24
 696:	9f 4f       	sbci	r25, 0xFF	; 255
 698:	01 c0       	rjmp	.+2      	; 0x69c <__utoa_common>

0000069a <__utoa_ncheck>:
 69a:	bb 27       	eor	r27, r27

0000069c <__utoa_common>:
 69c:	fb 01       	movw	r30, r22
 69e:	55 27       	eor	r21, r21
 6a0:	aa 27       	eor	r26, r26
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	aa 1f       	adc	r26, r26
 6a8:	a4 17       	cp	r26, r20
 6aa:	10 f0       	brcs	.+4      	; 0x6b0 <__utoa_common+0x14>
 6ac:	a4 1b       	sub	r26, r20
 6ae:	83 95       	inc	r24
 6b0:	50 51       	subi	r21, 0x10	; 16
 6b2:	b9 f7       	brne	.-18     	; 0x6a2 <__utoa_common+0x6>
 6b4:	a0 5d       	subi	r26, 0xD0	; 208
 6b6:	aa 33       	cpi	r26, 0x3A	; 58
 6b8:	08 f0       	brcs	.+2      	; 0x6bc <__utoa_common+0x20>
 6ba:	a9 5d       	subi	r26, 0xD9	; 217
 6bc:	a1 93       	st	Z+, r26
 6be:	00 97       	sbiw	r24, 0x00	; 0
 6c0:	79 f7       	brne	.-34     	; 0x6a0 <__utoa_common+0x4>
 6c2:	b1 11       	cpse	r27, r1
 6c4:	b1 93       	st	Z+, r27
 6c6:	11 92       	st	Z+, r1
 6c8:	cb 01       	movw	r24, r22
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <strrev>

000006cc <strrev>:
 6cc:	dc 01       	movw	r26, r24
 6ce:	fc 01       	movw	r30, r24
 6d0:	67 2f       	mov	r22, r23
 6d2:	71 91       	ld	r23, Z+
 6d4:	77 23       	and	r23, r23
 6d6:	e1 f7       	brne	.-8      	; 0x6d0 <strrev+0x4>
 6d8:	32 97       	sbiw	r30, 0x02	; 2
 6da:	04 c0       	rjmp	.+8      	; 0x6e4 <strrev+0x18>
 6dc:	7c 91       	ld	r23, X
 6de:	6d 93       	st	X+, r22
 6e0:	70 83       	st	Z, r23
 6e2:	62 91       	ld	r22, -Z
 6e4:	ae 17       	cp	r26, r30
 6e6:	bf 07       	cpc	r27, r31
 6e8:	c8 f3       	brcs	.-14     	; 0x6dc <strrev+0x10>
 6ea:	08 95       	ret

000006ec <__divmodsi4>:
 6ec:	05 2e       	mov	r0, r21
 6ee:	97 fb       	bst	r25, 7
 6f0:	16 f4       	brtc	.+4      	; 0x6f6 <__divmodsi4+0xa>
 6f2:	00 94       	com	r0
 6f4:	0f d0       	rcall	.+30     	; 0x714 <__negsi2>
 6f6:	57 fd       	sbrc	r21, 7
 6f8:	05 d0       	rcall	.+10     	; 0x704 <__divmodsi4_neg2>
 6fa:	24 d0       	rcall	.+72     	; 0x744 <__udivmodsi4>
 6fc:	07 fc       	sbrc	r0, 7
 6fe:	02 d0       	rcall	.+4      	; 0x704 <__divmodsi4_neg2>
 700:	46 f4       	brtc	.+16     	; 0x712 <__divmodsi4_exit>
 702:	08 c0       	rjmp	.+16     	; 0x714 <__negsi2>

00000704 <__divmodsi4_neg2>:
 704:	50 95       	com	r21
 706:	40 95       	com	r20
 708:	30 95       	com	r19
 70a:	21 95       	neg	r18
 70c:	3f 4f       	sbci	r19, 0xFF	; 255
 70e:	4f 4f       	sbci	r20, 0xFF	; 255
 710:	5f 4f       	sbci	r21, 0xFF	; 255

00000712 <__divmodsi4_exit>:
 712:	08 95       	ret

00000714 <__negsi2>:
 714:	90 95       	com	r25
 716:	80 95       	com	r24
 718:	70 95       	com	r23
 71a:	61 95       	neg	r22
 71c:	7f 4f       	sbci	r23, 0xFF	; 255
 71e:	8f 4f       	sbci	r24, 0xFF	; 255
 720:	9f 4f       	sbci	r25, 0xFF	; 255
 722:	08 95       	ret

00000724 <__muluhisi3>:
 724:	31 d0       	rcall	.+98     	; 0x788 <__umulhisi3>
 726:	a5 9f       	mul	r26, r21
 728:	90 0d       	add	r25, r0
 72a:	b4 9f       	mul	r27, r20
 72c:	90 0d       	add	r25, r0
 72e:	a4 9f       	mul	r26, r20
 730:	80 0d       	add	r24, r0
 732:	91 1d       	adc	r25, r1
 734:	11 24       	eor	r1, r1
 736:	08 95       	ret

00000738 <__mulshisi3>:
 738:	b7 ff       	sbrs	r27, 7
 73a:	f4 cf       	rjmp	.-24     	; 0x724 <__muluhisi3>

0000073c <__mulohisi3>:
 73c:	f3 df       	rcall	.-26     	; 0x724 <__muluhisi3>
 73e:	82 1b       	sub	r24, r18
 740:	93 0b       	sbc	r25, r19
 742:	08 95       	ret

00000744 <__udivmodsi4>:
 744:	a1 e2       	ldi	r26, 0x21	; 33
 746:	1a 2e       	mov	r1, r26
 748:	aa 1b       	sub	r26, r26
 74a:	bb 1b       	sub	r27, r27
 74c:	fd 01       	movw	r30, r26
 74e:	0d c0       	rjmp	.+26     	; 0x76a <__udivmodsi4_ep>

00000750 <__udivmodsi4_loop>:
 750:	aa 1f       	adc	r26, r26
 752:	bb 1f       	adc	r27, r27
 754:	ee 1f       	adc	r30, r30
 756:	ff 1f       	adc	r31, r31
 758:	a2 17       	cp	r26, r18
 75a:	b3 07       	cpc	r27, r19
 75c:	e4 07       	cpc	r30, r20
 75e:	f5 07       	cpc	r31, r21
 760:	20 f0       	brcs	.+8      	; 0x76a <__udivmodsi4_ep>
 762:	a2 1b       	sub	r26, r18
 764:	b3 0b       	sbc	r27, r19
 766:	e4 0b       	sbc	r30, r20
 768:	f5 0b       	sbc	r31, r21

0000076a <__udivmodsi4_ep>:
 76a:	66 1f       	adc	r22, r22
 76c:	77 1f       	adc	r23, r23
 76e:	88 1f       	adc	r24, r24
 770:	99 1f       	adc	r25, r25
 772:	1a 94       	dec	r1
 774:	69 f7       	brne	.-38     	; 0x750 <__udivmodsi4_loop>
 776:	60 95       	com	r22
 778:	70 95       	com	r23
 77a:	80 95       	com	r24
 77c:	90 95       	com	r25
 77e:	9b 01       	movw	r18, r22
 780:	ac 01       	movw	r20, r24
 782:	bd 01       	movw	r22, r26
 784:	cf 01       	movw	r24, r30
 786:	08 95       	ret

00000788 <__umulhisi3>:
 788:	a2 9f       	mul	r26, r18
 78a:	b0 01       	movw	r22, r0
 78c:	b3 9f       	mul	r27, r19
 78e:	c0 01       	movw	r24, r0
 790:	a3 9f       	mul	r26, r19
 792:	70 0d       	add	r23, r0
 794:	81 1d       	adc	r24, r1
 796:	11 24       	eor	r1, r1
 798:	91 1d       	adc	r25, r1
 79a:	b2 9f       	mul	r27, r18
 79c:	70 0d       	add	r23, r0
 79e:	81 1d       	adc	r24, r1
 7a0:	11 24       	eor	r1, r1
 7a2:	91 1d       	adc	r25, r1
 7a4:	08 95       	ret

000007a6 <_exit>:
 7a6:	f8 94       	cli

000007a8 <__stop_program>:
 7a8:	ff cf       	rjmp	.-2      	; 0x7a8 <__stop_program>
